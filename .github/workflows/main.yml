name: Airflow ETL CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy==1.24.3
        pip install pandas==2.0.3
        pip install -r requirements.txt

    - name: Debug environment
      run: |
        echo "Python version:"
        python --version
        echo "Pip list:"
        pip list
        echo "NumPy version:"
        python -c "import numpy; print(numpy.__version__)"
        echo "Pandas version:"
        python -c "import pandas; print(pandas.__version__)"

    - name: Run tests
      run: |
        echo "Running tests from:"
        pwd
        echo "Test file contents:"
        ls -l test_for_etl.py
        python -m unittest test_for_etl.py
      env:
        PYTHONPATH: ${{ github.workspace }}

  build-and-run:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Compose
      run: |
        sudo rm /usr/local/bin/docker-compose
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o docker-compose
        chmod +x docker-compose
        sudo mv docker-compose /usr/local/bin

    - name: Build and run Docker Compose
      run: |
        echo "AIRFLOW_UID=$(id -u)" > .env
        docker-compose up -d
        sleep 60  # Give some time for services to start

    - name: Check running containers
      run: docker-compose ps

    - name: Check Airflow webserver
      run: |
        curl --fail http://localhost:8080/health || (docker-compose logs && exit 1)

    - name: Stop Docker Compose
      run: docker-compose down

  deploy:
    needs: build-and-run
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Add your deployment steps here"
        # For example:
        # - SSH into your server
        # - Pull the latest code
        # - Run docker-compose up -d        
